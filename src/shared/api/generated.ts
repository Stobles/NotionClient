/**
 * Generated by orval v6.21.0 üç∫
 * Do not edit manually.
 * Notion
 * OpenAPI spec version: 1.0.0
 */
import { createInstance } from "./api-instance";
import type { BodyType } from "./api-instance";
export type DocumentsControllerGetByParentIdParams = {
  parentId?: string;
};

export type DocumentsControllerGetByIdParams = {
  id: string;
};

export type UpdateParams = {
  id: string;
};

export interface CreateFavoriteDto {
  documentId: string;
  userId: string;
}

export interface FavoriteDto {
  documentId: string;
  document: DocumentDto;
  userId: string;
}

export type SortTypeType = (typeof SortTypeType)[keyof typeof SortTypeType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SortTypeType = {
  asc: "asc",
  desc: "desc",
} as const;

export interface SortType {
  field?: string;
  type?: SortTypeType;
}

export interface FilterType {
  isArchived?: boolean;
}

export interface SearchParams {
  filters?: FilterType;
  limit?: number;
  query: string;
  parent?: boolean;
  sort?: SortType;
}

export interface UpdateDocumentDto {
  content?: string;
  coverImage?: string;
  icon?: string;
  isArchived?: boolean;
  isPublished?: boolean;
  parentId?: string;
  title?: string;
}

export interface DocumentDto {
  childrens: DocumentDto[];
  favoritedBy: FavoriteDto[];
  parent: DocumentDto;
  content: string;
  coverImage: string;
  createdAt: string;
  icon: string;
  id: string;
  isArchived: boolean;
  isPublished: boolean;
  parentId: string;
  title: string;
  updatedAt: string;
  userId: string;
}

export interface CreateDocumentDto {
  parentId?: string;
  title: string;
  userId?: string;
}

export interface GetSessionInfoDto {
  avatar: string;
  email: string;
  iat: number;
  lat: number;
  sub: string;
  username: string;
}

export interface SignInLocalBodyDto {
  email: string;
  password: string;
}

export interface SignUpLocalBodyDto {
  email: string;
  password: string;
}

export interface PatchUserDto {
  avatar: string;
  hashedRt: string;
  isVerified: boolean;
  username: string;
}

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

export const usersControllerGetUser = (
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<void>({ url: `/users`, method: "GET" }, options);
};

export const usersControllerPatchOne = (
  patchUserDto: BodyType<PatchUserDto>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<void>(
    {
      url: `/users`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: patchUserDto,
    },
    options,
  );
};

export const authControllerSignUpLocal = (
  signUpLocalBodyDto: BodyType<SignUpLocalBodyDto>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<void>(
    {
      url: `/auth/local/signup`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: signUpLocalBodyDto,
    },
    options,
  );
};

export const authControllerSignInLocal = (
  signInLocalBodyDto: BodyType<SignInLocalBodyDto>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<void>(
    {
      url: `/auth/local/signin`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: signInLocalBodyDto,
    },
    options,
  );
};

export const authControllerVerify = (
  id: string,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<void>(
    { url: `/auth/verify/${id}`, method: "GET" },
    options,
  );
};

export const authControllerGoogleAuth = (
  from: unknown,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<void>(
    { url: `/auth/google-logins/${from}`, method: "GET" },
    options,
  );
};

export const authControllerGoogleAuthCallback = (
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<void>(
    { url: `/auth/google/callback`, method: "GET" },
    options,
  );
};

export const authControllerLogout = (
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<void>({ url: `/auth/logout`, method: "POST" }, options);
};

export const authControllerRefreshTokens = (
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<void>(
    { url: `/auth/refresh`, method: "POST" },
    options,
  );
};

export const authControllerGetSessionInfo = (
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<GetSessionInfoDto>(
    { url: `/auth/session`, method: "GET" },
    options,
  );
};

export const documentsControllerCreate = (
  createDocumentDto: BodyType<CreateDocumentDto>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<DocumentDto>(
    {
      url: `/documents`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createDocumentDto,
    },
    options,
  );
};

export const documentsControllerUpdate = (
  updateDocumentDto: BodyType<UpdateDocumentDto>,
  params: UpdateParams,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<void>(
    {
      url: `/documents`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: updateDocumentDto,
      params,
    },
    options,
  );
};

export const documentsControllerGetAll = (
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<DocumentDto[]>(
    { url: `/documents`, method: "GET" },
    options,
  );
};

export const documentsControllerDelete = (
  id: string,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<DocumentDto>(
    { url: `/documents/${id}`, method: "DELETE" },
    options,
  );
};

export const documentsControllerGetById = (
  params: DocumentsControllerGetByIdParams,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<DocumentDto>(
    { url: `/documents/getById`, method: "GET", params },
    options,
  );
};

export const documentsControllerGetByParentId = (
  params?: DocumentsControllerGetByParentIdParams,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<DocumentDto[]>(
    { url: `/documents/getByParentId`, method: "GET", params },
    options,
  );
};

export const documentsControllerGetArchived = (
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<DocumentDto[]>(
    { url: `/documents/getArchived`, method: "GET" },
    options,
  );
};

export const documentsControllerArchive = (
  id: string,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<void>(
    { url: `/documents/archive/${id}`, method: "PATCH" },
    options,
  );
};

export const documentsControllerRestore = (
  id: string,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<void>(
    { url: `/documents/restore/${id}`, method: "PATCH" },
    options,
  );
};

export const documentsControllerSearch = (
  searchParams: BodyType<SearchParams>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<DocumentDto[]>(
    {
      url: `/documents/search`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: searchParams,
    },
    options,
  );
};

export const favoritesControllerGetAll = (
  id: string,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<FavoriteDto[]>(
    { url: `/favorites/${id}`, method: "GET" },
    options,
  );
};

export const favoritesControllerToggleFavorite = (
  createFavoriteDto: BodyType<CreateFavoriteDto>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<FavoriteDto>(
    {
      url: `/favorites`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createFavoriteDto,
    },
    options,
  );
};

export type UsersControllerGetUserResult = NonNullable<
  Awaited<ReturnType<typeof usersControllerGetUser>>
>;
export type UsersControllerPatchOneResult = NonNullable<
  Awaited<ReturnType<typeof usersControllerPatchOne>>
>;
export type AuthControllerSignUpLocalResult = NonNullable<
  Awaited<ReturnType<typeof authControllerSignUpLocal>>
>;
export type AuthControllerSignInLocalResult = NonNullable<
  Awaited<ReturnType<typeof authControllerSignInLocal>>
>;
export type AuthControllerVerifyResult = NonNullable<
  Awaited<ReturnType<typeof authControllerVerify>>
>;
export type AuthControllerGoogleAuthResult = NonNullable<
  Awaited<ReturnType<typeof authControllerGoogleAuth>>
>;
export type AuthControllerGoogleAuthCallbackResult = NonNullable<
  Awaited<ReturnType<typeof authControllerGoogleAuthCallback>>
>;
export type AuthControllerLogoutResult = NonNullable<
  Awaited<ReturnType<typeof authControllerLogout>>
>;
export type AuthControllerRefreshTokensResult = NonNullable<
  Awaited<ReturnType<typeof authControllerRefreshTokens>>
>;
export type AuthControllerGetSessionInfoResult = NonNullable<
  Awaited<ReturnType<typeof authControllerGetSessionInfo>>
>;
export type DocumentsControllerCreateResult = NonNullable<
  Awaited<ReturnType<typeof documentsControllerCreate>>
>;
export type DocumentsControllerUpdateResult = NonNullable<
  Awaited<ReturnType<typeof documentsControllerUpdate>>
>;
export type DocumentsControllerGetAllResult = NonNullable<
  Awaited<ReturnType<typeof documentsControllerGetAll>>
>;
export type DocumentsControllerDeleteResult = NonNullable<
  Awaited<ReturnType<typeof documentsControllerDelete>>
>;
export type DocumentsControllerGetByIdResult = NonNullable<
  Awaited<ReturnType<typeof documentsControllerGetById>>
>;
export type DocumentsControllerGetByParentIdResult = NonNullable<
  Awaited<ReturnType<typeof documentsControllerGetByParentId>>
>;
export type DocumentsControllerSearchResult = NonNullable<
  Awaited<ReturnType<typeof documentsControllerSearch>>
>;
export type FavoritesControllerGetAllResult = NonNullable<
  Awaited<ReturnType<typeof favoritesControllerGetAll>>
>;
export type FavoritesControllerToggleFavoriteResult = NonNullable<
  Awaited<ReturnType<typeof favoritesControllerToggleFavorite>>
>;
