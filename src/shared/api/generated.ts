/**
 * Generated by orval v6.21.0 üç∫
 * Do not edit manually.
 * Notion
 * OpenAPI spec version: 1.0.0
 */
import { createInstance } from "./api-instance";
import type { BodyType } from "./api-instance";
export interface CreateDocumentDto {
  parentId?: string;
  title: string;
}

export interface GetSessionInfoDto {
  avatar: string;
  email: string;
  iat: number;
  lat: number;
  sub: string;
  username: string;
}

export interface SignInLocalBodyDto {
  email: string;
  password: string;
}

export interface SignUpLocalBodyDto {
  email: string;
  password: string;
}

export interface PatchUserDto {
  avatar: string;
  hashedRt: string;
  isVerified: boolean;
  username: string;
}

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

export const usersControllerGetUser = (
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<void>({ url: `/users`, method: "GET" }, options);
};

export const usersControllerPatchOne = (
  patchUserDto: BodyType<PatchUserDto>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<void>(
    {
      url: `/users`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: patchUserDto,
    },
    options,
  );
};

export const authControllerSignUpLocal = (
  signUpLocalBodyDto: BodyType<SignUpLocalBodyDto>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<void>(
    {
      url: `/auth/local/signup`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: signUpLocalBodyDto,
    },
    options,
  );
};

export const authControllerSignInLocal = (
  signInLocalBodyDto: BodyType<SignInLocalBodyDto>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<void>(
    {
      url: `/auth/local/signin`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: signInLocalBodyDto,
    },
    options,
  );
};

export const authControllerVerify = (
  id: number,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<void>(
    { url: `/auth/verify/${id}`, method: "GET" },
    options,
  );
};

export const authControllerGoogleAuth = (
  from: number,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<void>(
    { url: `/auth/google-logins/${from}`, method: "GET" },
    options,
  );
};

export const authControllerGoogleAuthCallback = (
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<void>(
    { url: `/auth/google/callback`, method: "GET" },
    options,
  );
};

export const authControllerLogout = (
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<void>({ url: `/auth/logout`, method: "POST" }, options);
};

export const authControllerRefreshTokens = (
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<void>(
    { url: `/auth/refresh`, method: "POST" },
    options,
  );
};

export const authControllerGetSessionInfo = (
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<GetSessionInfoDto>(
    { url: `/auth/session`, method: "GET" },
    options,
  );
};

export const documentsControllerCreate = (
  createDocumentDto: BodyType<CreateDocumentDto>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<void>(
    {
      url: `/documents`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createDocumentDto,
    },
    options,
  );
};

export type UsersControllerGetUserResult = NonNullable<
  Awaited<ReturnType<typeof usersControllerGetUser>>
>;
export type UsersControllerPatchOneResult = NonNullable<
  Awaited<ReturnType<typeof usersControllerPatchOne>>
>;
export type AuthControllerSignUpLocalResult = NonNullable<
  Awaited<ReturnType<typeof authControllerSignUpLocal>>
>;
export type AuthControllerSignInLocalResult = NonNullable<
  Awaited<ReturnType<typeof authControllerSignInLocal>>
>;
export type AuthControllerVerifyResult = NonNullable<
  Awaited<ReturnType<typeof authControllerVerify>>
>;
export type AuthControllerGoogleAuthResult = NonNullable<
  Awaited<ReturnType<typeof authControllerGoogleAuth>>
>;
export type AuthControllerGoogleAuthCallbackResult = NonNullable<
  Awaited<ReturnType<typeof authControllerGoogleAuthCallback>>
>;
export type AuthControllerLogoutResult = NonNullable<
  Awaited<ReturnType<typeof authControllerLogout>>
>;
export type AuthControllerRefreshTokensResult = NonNullable<
  Awaited<ReturnType<typeof authControllerRefreshTokens>>
>;
export type AuthControllerGetSessionInfoResult = NonNullable<
  Awaited<ReturnType<typeof authControllerGetSessionInfo>>
>;
export type DocumentsControllerCreateResult = NonNullable<
  Awaited<ReturnType<typeof documentsControllerCreate>>
>;
